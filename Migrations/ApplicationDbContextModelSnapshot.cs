// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapp.Context;

namespace webapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "8a0bedfe-d5c7-40d8-9471-1614f7769cb2", ConcurrencyStamp = "fc51a9c2-a72e-46b5-8678-2de81cdcfc5f", Name = "Organizer", NormalizedName = "ORGANIZER" },
                        new { Id = "e80120a3-b085-4f1d-898d-675453fa98e1", ConcurrencyStamp = "c9e0d98c-7943-48d4-8b00-a48828161b35", Name = "User", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", RoleId = "8a0bedfe-d5c7-40d8-9471-1614f7769cb2" },
                        new { UserId = "4a74ef28-adb9-4817-8d04-1928dcf3ab32", RoleId = "e80120a3-b085-4f1d-898d-675453fa98e1" },
                        new { UserId = "6ac426e9-e07e-434a-885f-ff3e7489f1c4", RoleId = "e80120a3-b085-4f1d-898d-675453fa98e1" },
                        new { UserId = "9286a727-d145-4e89-b48f-67d760d77855", RoleId = "e80120a3-b085-4f1d-898d-675453fa98e1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("webapp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Address");

                    b.HasData(
                        new { Id = 1, CityId = 1, Code = "88000", Street = "Dubrovacka" },
                        new { Id = 2, CityId = 2, Code = "71000", Street = "Mehmeda Spahe" },
                        new { Id = 3, CityId = 3, Code = "10020", Street = "Masiceva" },
                        new { Id = 4, CityId = 4, Code = "11000", Street = "Savska" }
                    );
                });

            modelBuilder.Entity("webapp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", AccessFailedCount = 0, CityId = 1, ConcurrencyStamp = "ea80dd0f-34f5-441f-a94e-d512ffe95704", Email = "organizer1@gmail.com", EmailConfirmed = false, FirstName = "Emir", Gender = "M", LastName = "Memic", LockoutEnabled = false, NormalizedEmail = "ORGANIZER1@GMAIL.COM", NormalizedUserName = "ORGANIZER1", PasswordHash = "AQAAAAEAACcQAAAAEKDjNbvkdEfkzDmZak9i59Pi5m9xErsn4ONrI0LD+izYDt+gyHFHm6ekiWcGYiyHYw==", PhoneNumberConfirmed = false, SecurityStamp = "stamp1", TwoFactorEnabled = false, UserName = "Organizer1" },
                        new { Id = "4a74ef28-adb9-4817-8d04-1928dcf3ab32", AccessFailedCount = 0, CityId = 2, ConcurrencyStamp = "286adab1-f53d-4882-af25-7d122c5830b2", Email = "user1@gmail.com", EmailConfirmed = false, FirstName = "Melisa", Gender = "F", LastName = "Ibric", LockoutEnabled = false, NormalizedEmail = "USER1@GMAIL.COM", NormalizedUserName = "USER1", PasswordHash = "AQAAAAEAACcQAAAAEHJ2RKnU9D2CWi0dWq/PiouzkOGsF3eP2liTD5dV9gGLCOpFurmWI38CSuCISscI5g==", PhoneNumberConfirmed = false, SecurityStamp = "stamp2", TwoFactorEnabled = false, UserName = "User1" },
                        new { Id = "6ac426e9-e07e-434a-885f-ff3e7489f1c4", AccessFailedCount = 0, CityId = 3, ConcurrencyStamp = "fc059bdd-8e2e-469f-a9ff-0e731227f248", Email = "user2@gmail.com", EmailConfirmed = false, FirstName = "Tarik", Gender = "M", LastName = "Novalic", LockoutEnabled = false, NormalizedEmail = "USER2@GMAIL.COM", NormalizedUserName = "USER2", PasswordHash = "AQAAAAEAACcQAAAAEFUclO1t2Bm1slv2dc6m5AkUQxVtekaw+W6ZgY6C7LadSUUEfs+Hl3R4zcg0mKdqNQ==", PhoneNumberConfirmed = false, SecurityStamp = "stamp3", TwoFactorEnabled = false, UserName = "User2" },
                        new { Id = "9286a727-d145-4e89-b48f-67d760d77855", AccessFailedCount = 0, CityId = 4, ConcurrencyStamp = "e1db69b2-d589-4a36-ba3e-bfe0ff100d77", Email = "user3@gmail.com", EmailConfirmed = false, FirstName = "Riad", Gender = "M", LastName = "Sendic", LockoutEnabled = false, NormalizedEmail = "USER3@GMAIL.COM", NormalizedUserName = "USER3", PasswordHash = "AQAAAAEAACcQAAAAEP6nAWGFwUNT8dUR+PXRTriKVwWTL57R3d6quJgsKDLypJVYWp62sEgqwNgcJbZP3g==", PhoneNumberConfirmed = false, SecurityStamp = "stamp4", TwoFactorEnabled = false, UserName = "User3" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("webapp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new { Id = 1, CountryId = 1, Name = "Mostar" },
                        new { Id = 2, CountryId = 1, Name = "Sarajevo" },
                        new { Id = 3, CountryId = 2, Name = "Zagreb" },
                        new { Id = 4, CountryId = 3, Name = "Beograd" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EventId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("webapp.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new { Id = 1, Name = "Bosnia and Herzegovina" },
                        new { Id = 2, Name = "Croatia" },
                        new { Id = 3, Name = "Serbia" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AverageRating");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EventTypeId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TicketLink");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("VenueId");

                    b.ToTable("Event");

                    b.HasData(
                        new { Id = 1, CreatedDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local), Description = "Dino is recognised for his later solo work during which he established himself as one of the best-selling regional artists of all time. During his career he has produced over a dozen chart-topping albums. Don't miss your opportunity to attend.", EndDate = new DateTime(2021, 8, 5, 23, 0, 0, 0, DateTimeKind.Unspecified), EventTypeId = 1, ImageUrl = "DinoMerlin1.jpg", Name = "Dino Merlin", StartDate = new DateTime(2021, 8, 5, 20, 30, 0, 0, DateTimeKind.Unspecified), VenueId = 1 },
                        new { Id = 2, CreatedDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local), Description = "Eddie was an American guitarist and singer in early funk music who played lead guitar with Parliament-Funkadelic. His ten-minute guitar solo in the Funkadelic song Maggot Brain is hailed as one of the greatest solos of all time on any instrument", EndDate = new DateTime(2021, 9, 10, 17, 0, 0, 0, DateTimeKind.Unspecified), EventTypeId = 1, ImageUrl = "EddieHazel1.jpg", Name = "Eddie Hazel", StartDate = new DateTime(2021, 9, 10, 11, 30, 0, 0, DateTimeKind.Unspecified), VenueId = 2 },
                        new { Id = 3, CreatedDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local), Description = "Best duck party around, you will regret if you don't come and will have to wait forever for another one. So don't miss out!", EndDate = new DateTime(2021, 11, 16, 23, 0, 0, 0, DateTimeKind.Unspecified), EventTypeId = 2, ImageUrl = "DuckParty1.jpg", Name = "Duck Party", StartDate = new DateTime(2021, 11, 16, 20, 30, 0, 0, DateTimeKind.Unspecified), VenueId = 3 },
                        new { Id = 4, CreatedDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local), Description = "Dino is recognised for his later solo work during which he established himself as one of the best-selling regional artists of all time. During his career he has produced over a dozen chart-topping albums. Don't miss your opportunity to attend.", EndDate = new DateTime(2021, 9, 4, 22, 0, 0, 0, DateTimeKind.Unspecified), EventTypeId = 1, ImageUrl = "DinoMerlin2.jpg", Name = "Dino Merlin 2", StartDate = new DateTime(2021, 9, 4, 19, 0, 0, 0, DateTimeKind.Unspecified), VenueId = 1 },
                        new { Id = 5, CreatedDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local), Description = "Jimi was an American musician, singer, and songwriter. Although his mainstream career spanned only four years, he is widely regarded as one of the most influential electric guitarists in the history of popular music, and one of the most celebrated musicians of the 20th century. ", EndDate = new DateTime(2021, 10, 5, 22, 30, 0, 0, DateTimeKind.Unspecified), EventTypeId = 3, ImageUrl = "JimiHendrix1.jpg", Name = "Jimi Hendrix", StartDate = new DateTime(2021, 10, 5, 18, 0, 0, 0, DateTimeKind.Unspecified), VenueId = 2 }
                    );
                });

            modelBuilder.Entity("webapp.Models.EventChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId");

                    b.Property<int>("EventId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EventId");

                    b.ToTable("EventChannel");
                });

            modelBuilder.Entity("webapp.Models.EventGear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("EventId");

                    b.Property<int>("GearId");

                    b.Property<int?>("PurchaseId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GearId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("EventGear");
                });

            modelBuilder.Entity("webapp.Models.EventRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("EventId");

                    b.Property<int>("Rate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRating");
                });

            modelBuilder.Entity("webapp.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("EventType");

                    b.HasData(
                        new { Id = 1, Name = "Concert" },
                        new { Id = 2, Name = "Party" },
                        new { Id = 3, Name = "Performance" }
                    );
                });

            modelBuilder.Entity("webapp.Models.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDescriptor");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Message");

                    b.Property<string>("RequestId");

                    b.Property<string>("RequestPath");

                    b.Property<string>("Source");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Type");

                    b.Property<string>("User");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("webapp.Models.Gear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GearTypeId");

                    b.Property<string>("Name");

                    b.Property<float>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GearTypeId");

                    b.ToTable("Gear");

                    b.HasData(
                        new { Id = 1, GearTypeId = 1, Name = "Korg KG1", Price = 5f },
                        new { Id = 2, GearTypeId = 2, Name = "Sony AX15", Price = 10f },
                        new { Id = 3, GearTypeId = 3, Name = "Lux AL350", Price = 15f }
                    );
                });

            modelBuilder.Entity("webapp.Models.GearImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ContainerH");

                    b.Property<float>("ContainerW");

                    b.Property<int>("GearId");

                    b.Property<string>("ImageLink");

                    b.Property<float>("ScaleX");

                    b.Property<float>("ScaleY");

                    b.Property<float>("SkewX");

                    b.Property<float>("SkewY");

                    b.Property<float>("TranslateX");

                    b.Property<float>("TranslateY");

                    b.HasKey("Id");

                    b.HasIndex("GearId");

                    b.ToTable("GearImage");

                    b.HasData(
                        new { Id = 1, ContainerH = 30f, ContainerW = 12f, GearId = 2, ImageLink = "/EventStage/StageEquipment/SpeakerAX.png", ScaleX = 1f, ScaleY = 1f, SkewX = 0f, SkewY = 0f, TranslateX = 650f, TranslateY = 200f },
                        new { Id = 2, ContainerH = 30f, ContainerW = 12f, GearId = 2, ImageLink = "/EventStage/StageEquipment/SpeakerAX.png", ScaleX = -1f, ScaleY = 1f, SkewX = 0f, SkewY = 0f, TranslateX = -130f, TranslateY = 200f },
                        new { Id = 3, ContainerH = 30f, ContainerW = 80f, GearId = 3, ImageLink = "/EventStage/StageEquipment/StageLights.png", ScaleX = 0.6f, ScaleY = 0.6f, SkewX = 0f, SkewY = 0f, TranslateX = 5f, TranslateY = 0f },
                        new { Id = 4, ContainerH = 100f, ContainerW = 100f, GearId = 1, ImageLink = "/EventStage/StageEquipment/Microphone1.png", ScaleX = 0.4f, ScaleY = 0.3f, SkewX = 0f, SkewY = 0f, TranslateX = 50f, TranslateY = 70f }
                    );
                });

            modelBuilder.Entity("webapp.Models.GearType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("GearType");

                    b.HasData(
                        new { Id = 1, Name = "Microphones" },
                        new { Id = 2, Name = "Speakers" },
                        new { Id = 3, Name = "Lights" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("webapp.Models.NotificationAppUser", b =>
                {
                    b.Property<int>("NotificationId");

                    b.Property<string>("AppUserId");

                    b.Property<bool>("IsRead");

                    b.HasKey("NotificationId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("webapp.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<float>("TotalDiscount");

                    b.Property<float>("TotalPrice");

                    b.HasKey("Id");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("webapp.Models.TopUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId");

                    b.Property<int>("TopUpCardId");

                    b.Property<DateTime>("TopUpDate");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TopUpCardId")
                        .IsUnique();

                    b.ToTable("TopUp");

                    b.HasData(
                        new { Id = 1, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", TopUpCardId = 1, TopUpDate = new DateTime(2021, 7, 21, 0, 54, 13, 603, DateTimeKind.Local) },
                        new { Id = 2, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", TopUpCardId = 2, TopUpDate = new DateTime(2021, 7, 21, 0, 54, 13, 604, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("webapp.Models.TopUpCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Code");

                    b.HasKey("Id");

                    b.ToTable("TopUpCard");

                    b.HasData(
                        new { Id = 1, Amount = 100, Code = "ABCDEFG123456100A" },
                        new { Id = 2, Amount = 200, Code = "ABCDEFG123456200A" },
                        new { Id = 3, Amount = 100, Code = "ABCDEFG123456100B" },
                        new { Id = 4, Amount = 200, Code = "ABCDEFG123456200B" },
                        new { Id = 5, Amount = 200, Code = "ABCDEFG123456200C" },
                        new { Id = 6, Amount = 100, Code = "ABCDEFG123456100C" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("AppUserId");

                    b.Property<int>("Capacity");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("VenueTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("VenueTypeId");

                    b.ToTable("Venue");

                    b.HasData(
                        new { Id = 1, AddressId = 1, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", Capacity = 1500, ImageUrl = "Venue1.jpg", Name = "Parallax", VenueTypeId = 1 },
                        new { Id = 2, AddressId = 2, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", Capacity = 1000, ImageUrl = "Venue2.jpg", Name = "Obsidian", VenueTypeId = 2 },
                        new { Id = 3, AddressId = 3, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", Capacity = 500, ImageUrl = "Venue3.jpg", Name = "Galaxis", VenueTypeId = 3 }
                    );
                });

            modelBuilder.Entity("webapp.Models.VenueChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueChannel");
                });

            modelBuilder.Entity("webapp.Models.VenueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("VenueType");

                    b.HasData(
                        new { Id = 1, Name = "Club" },
                        new { Id = 2, Name = "Theater" },
                        new { Id = 3, Name = "Hall" }
                    );
                });

            modelBuilder.Entity("webapp.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId");

                    b.Property<float>("Credits");

                    b.Property<int>("Discount");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Wallet");

                    b.HasData(
                        new { Id = 1, AppUserId = "27e1c9dc-44a9-4aa4-a23c-7ee45ce4d5fb", Credits = 500f, Discount = 4 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("webapp.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("webapp.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("webapp.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Address", b =>
                {
                    b.HasOne("webapp.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.AppUser", b =>
                {
                    b.HasOne("webapp.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.City", b =>
                {
                    b.HasOne("webapp.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Comment", b =>
                {
                    b.HasOne("webapp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("webapp.Models.Event", b =>
                {
                    b.HasOne("webapp.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.EventChannel", b =>
                {
                    b.HasOne("webapp.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.EventGear", b =>
                {
                    b.HasOne("webapp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Gear", "Gear")
                        .WithMany()
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId");
                });

            modelBuilder.Entity("webapp.Models.EventRating", b =>
                {
                    b.HasOne("webapp.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("webapp.Models.Gear", b =>
                {
                    b.HasOne("webapp.Models.GearType", "GearType")
                        .WithMany()
                        .HasForeignKey("GearTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.GearImage", b =>
                {
                    b.HasOne("webapp.Models.Gear", "Gear")
                        .WithMany()
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.NotificationAppUser", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Notification", "Notification")
                        .WithMany("NotificationAppUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.TopUp", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("webapp.Models.TopUpCard", "TopUpCard")
                        .WithOne("TopUp")
                        .HasForeignKey("webapp.Models.TopUp", "TopUpCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Venue", b =>
                {
                    b.HasOne("webapp.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("webapp.Models.VenueType", "VenueType")
                        .WithMany()
                        .HasForeignKey("VenueTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.VenueChannel", b =>
                {
                    b.HasOne("webapp.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Wallet", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
